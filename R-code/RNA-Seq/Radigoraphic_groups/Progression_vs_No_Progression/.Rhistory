normalisedCount=read.csv("normalized_counts.csv",header=T,row.names = 1)
#calculating mean
meanTable=apply(normalisedCount,1,mean)
meanTable=as.matrix(meanTable)
colnames(meanTable)=c("mean")
#merging mean with normalised count
exp_table=merge(meanTable,normalisedCount,by=0,row.names=1)
row.names(exp_table)=exp_table$Row.names
exp_table=exp_table[,c(2:170)]
# -log10p calculation
table1$log10p=-log10(table1$pvalue)
names(table1)[names(table1) == "log10p"] <- "-log10p"
table2$log10p=-log10(table2$pvalue)
names(table2)[names(table2) == "log10p"] <- "-log10p"
table3$log10p=-log10(table3$pvalue)
names(table3)[names(table3) == "log10p"] <- "-log10p"
table4$log10p=-log10(table4$pvalue)
names(table4)[names(table4) == "log10p"] <- "-log10p"
##SIGNIFICANCE
table1$significance= as.factor(table1$padj < 0.05 & abs(table1$log2FoldChange) > 1.0)
table2$significance= as.factor(table2$padj < 0.05 & abs(table2$log2FoldChange) > 1.0)
table3$significance= as.factor(table3$padj < 0.05 & abs(table3$log2FoldChange) > 1.0)
table4$significance= as.factor(table4$padj < 0.05 & abs(table4$log2FoldChange) > 1.0)
View(table1)
View(table2)
#merging table1 and expression and renaming columns
merged_1=merge(table1,exp_table,by=0)
row.names(merged_1)=merged_1$Row.names
merged_1=merged_1[,c(2:177)]
View(merged_1)
merged_1=merge(table1,exp_table,by=0)
row.names(merged_1)=merged_1$Row.names
merged_1=merged_1[,c(2:177)]
#merging table2 and expression and renaming columns
merged_2=merge(table2,exp_table,by=0)
row.names(merged_2)=merged_2$Row.names
merged_2=merged_2[,c(2:177)]
#merging table3 and expression and renaming columns
merged_3=merge(table3,exp_table,by=0)
row.names(merged_3)=merged_3$Row.names
merged_3=merged_3[,c(2:177)]
#merging table4 and expression and renaming columns
merged_4=merge(table4,exp_table,by=0)
row.names(merged_4)=merged_4$Row.names
merged_4=merged_4[,c(2:177)]
#MA plots
ggplot(data=merged_1) + geom_point(aes(x=log10(mean), y= `log2FoldChange`,color=significance))
ggplot(data=merged_3) + geom_point(aes(x=log10(mean), y= `log2FoldChange`,color=significance))
ggplot(data=merged_4) + geom_point(aes(x=log10(mean), y= `log2FoldChange`,color=significance))
#MA plots
ggplot(data=merged_2) + geom_point(aes(x=log10(mean), y= `log2FoldChange`,color=significance))
ggplot(merged_1,aes(x=log10(mean)))+geom_density(colour="black",fill="brown")+labs(title="Expression Density",x="Mean Log10",y="Density")
ggplot(merged_3,aes(x=log10(mean)))+geom_density(colour="black",fill="brown")+labs(title="Expression Density",x="Mean Log10",y="Density")
ggplot(merged_4,aes(x=log10(mean)))+geom_density(colour="black",fill="brown")+labs(title="Expression Density",x="Mean Log10",y="Density")
ggplot(data=merged_1) + geom_point(aes(x=`log2FoldChange`, y= `-log10p`,color=significance))
ggplot(data=merged_2) + geom_point(aes(x=`log2FoldChange`, y= `-log10p`,color=significance))
ggplot(data=merged_3) + geom_point(aes(x=`log2FoldChange`, y= `-log10p`,color=significance))
ggplot(data=merged_4) + geom_point(aes(x=`log2FoldChange`, y= `-log10p`,color=significance))
significant_genes_CCP_Acet_vs_CCP=subset(table1,table1$significance==TRUE)
significant_genes_CCP_Carb_vs_CCP=subset(table2,table2$significance==TRUE)
significant_genes_CCP_Carb_Acet_vs_CCP=subset(table3,table3$significance==TRUE)
significant_genes_Negative_vs_CCP=subset(table4,table4$significance==TRUE)
write.csv(significant_genes_CCP_Acet_vs_CCP,"significant_genes_CCP_Acet_vs_CCP.csv")
write.csv(significant_genes_CCP_Carb_Acet_vs_CCP,"significant_genes_CCP_Carb_Acet_vs_CCP.csv")
write.csv(significant_genes_Negative_vs_CCP,"significant_genes_Negative_vs_CCP.csv")
merge_demo=rbind(merged_1,merged_3)
merge_demo=rbind(merge_demo,merged_4)
merge_demo=unique(merge_demo)
View(merge_demo)
merged_1=subset(merged_1,merged_1$significance==TRUE)
merged_3=subset(merged_3,merged_3$significance==TRUE)
merged_4=subset(merged_4,merged_4$significance==TRUE)
View(merged_1)
View(merged_2)
merged_1=subset(merged_1,merged_1$significance==TRUE)
merged_2=subset(merged_2,merged_1$significance==TRUE)
merged_3=subset(merged_3,merged_3$significance==TRUE)
merged_4=subset(merged_4,merged_4$significance==TRUE)
View(merged_2)
View(Immunereults_CCP_Acet_vs_CCP)
merged_2=subset(merged_2,merged_2$significance==TRUE)
library(tidyverse)
gene_list=merge_demo[,c(4,5)]
gene_list<- gene_list %>% rownames_to_column("Row.names")
gene_list=gene_list[,c(3,1,2)]
names(gene_list)[names(gene_list) == "entrezid"] <- "ENTREZID"
names(gene_list)[names(gene_list) == "Row.names"] <- "ENSEMBL"
names(gene_list)[names(gene_list) == "symbol"] <- "SYMBOL"
#GO Classification
library(clusterProfiler)
#GO Classification
library(clusterProfiler)
View(gene_list)
View(merge_demo)
merge_demo=rbind(merged_1,merged_3)
merge_demo=rbind(merge_demo,merged_4)
merge_demo=unique(merge_demo)
View(merge_demo)
library(tidyverse)
gene_list=merge_demo[,c(4,5)]
gene_list<- gene_list %>% rownames_to_column("Row.names")
gene_list=gene_list[,c(3,1,2)]
names(gene_list)[names(gene_list) == "entrezid"] <- "ENTREZID"
names(gene_list)[names(gene_list) == "Row.names"] <- "ENSEMBL"
names(gene_list)[names(gene_list) == "symbol"] <- "SYMBOL"
gene_list$ENTREZID
gene_1=c("3757","23504","81610","1958","140825","2354","4131","8128","84985","170689","3576","91646","80164","3048","23504","1748","140825","2354","8128","23500","50944","120114","170689","91752","91646","221687","80164","3048","23504","1748"","1958","140825","78995","2354","6633","3512","10964","8128","55502","23500","50944","120114","170689","3576","83985","91646","2731","221687","80164","3048")
gene_1=c("3757","23504","81610","1958","140825","2354","4131","8128","84985","170689","3576","91646","80164","3048","23504","1748","140825","2354","8128","23500","50944","120114","170689","91752","91646","221687","80164","3048","23504","1748"","1958","140825","78995","2354","6633","3512","10964","8128","55502","23500","50944","120114","170689","3576","83985","91646","2731","221687","80164","3048")
gene_1=c("3757","23504","81610","1958","140825","2354","4131","8128","84985","170689","3576","91646","80164","3048","23504","1748","140825","2354","8128","23500","50944","120114","170689")
ggo <- groupGO(gene= gene_1,OrgDb    = 'org.Hs.eg.db',ont= "CC",level = 3,readable = TRUE)
ggo
library(enrichplot)
edo <- enrichDGN(gene_1)
barplot(edo, showCategory=20)
library(pheatmap)
#ex=merged_1[,c(9:176)]
ex=merged_1[,c(4,9:176)]
row.names(ex)=ex$symbol
ex=ex[,c(2:169)]
pheatmap(ex)
cal_z_score <- function(x){(x - mean(x)) / sd(x)}
data_subset_norm <- t(apply(ex, 1, cal_z_score))
pheatmap(data_subset_norm)
data_subset_norm=as.data.frame(data_subset_norm)
data_subset_norm1=data_subset_norm[,c(39:58,1:20)]
my_sample_col <- data.frame(sample = rep(c("CCP_Acet", "CCP"), c(20,20)))
row.names(my_sample_col) <- colnames(data_subset_norm1)
library(RColorBrewer)
heat_colors <- brewer.pal(6, "YlOrRd")
pheatmap(data_subset_norm1, annotation_col = my_sample_col,color = heat_colors)
#Triple vs CCP
library(pheatmap)
ex=merged_3[,c(4,9:176)]
row.names(ex)=ex$symbol
ex=ex[,c(2:169)]
pheatmap(ex)
cal_z_score <- function(x){(x - mean(x)) / sd(x)}
data_subset_norm <- t(apply(ex, 1, cal_z_score))
pheatmap(data_subset_norm)
data_subset_norm=as.data.frame(data_subset_norm)
data_subset_norm1=data_subset_norm[,c(118:137,1:20)]
my_sample_col <- data.frame(sample = rep(c("Triple", "CCP"), c(20,20)))
row.names(my_sample_col) <- colnames(data_subset_norm1)
library(RColorBrewer)
heat_colors <- brewer.pal(6, "YlOrRd")
pheatmap(data_subset_norm1, annotation_col = my_sample_col,color = heat_colors)
#negative vs CCP
library(pheatmap)
ex=merged_4[,c(4,9:176)]
row.names(ex)=ex$symbol
ex=ex[,c(2:169)]
pheatmap(ex)
cal_z_score <- function(x){(x - mean(x)) / sd(x)}
data_subset_norm <- t(apply(ex, 1, cal_z_score))
pheatmap(data_subset_norm)
data_subset_norm=as.data.frame(data_subset_norm)
data_subset_norm1=data_subset_norm[,c(139:168,1:38)]
my_sample_col <- data.frame(sample = rep(c("Negative", "CCP"), c(38,30)))
row.names(my_sample_col) <- colnames(data_subset_norm1)
library(RColorBrewer)
heat_colors <- brewer.pal(6, "YlOrRd")
pheatmap(data_subset_norm1, annotation_col = my_sample_col,color = heat_colors)
library(clusterProfiler)
#GO Classification
library(clusterProfiler)
View(merged_1)
gene_1=c("3757","23504","81610","1958",140825","2354","4131","8128","84985","170689","91646","3576","91646","80164","3048")
gene_1=c("3757","23504","81610","1958","140825","2354","4131","8128","84985","170689","91646","3576","91646","80164","3048")
ggo <- groupGO(gene= gene_1,OrgDb    = 'org.Hs.eg.db',ont= "CC",level = 3,readable = TRUE)
ggo
View(ggo)
data(gene_1, package="DOSE")
head(gene_1)
wpgmtfile <- system.file("extdata/wikipathways-20180810-gmt-Homo_sapiens.gmt", package="clusterProfiler")
wp2gene <- read.gmt(wpgmtfile)
wp2gene <- wp2gene %>% tidyr::separate(ont, c("name","version","wpid","org"), "%")
wpid2gene <- wp2gene %>% dplyr::select(wpid, gene_1) #TERM2GENE
wpid2name <- wp2gene %>% dplyr::select(wpid, name) #TERM2NAME
wpgmtfile <- system.file("extdata/wikipathways-20180810-gmt-Homo_sapiens.gmt", package="clusterProfiler")
wp2gene <- read.gmt(wpgmtfile)
wp2gene <- wp2gene %>% tidyr::separate(ont, c("name","version","wpid","org"), "%")
wpid2gene <- wp2gene %>% dplyr::select(wpid, gene) #TERM2GENE
wpid2name <- wp2gene %>% dplyr::select(wpid, name) #TERM2NAME
ewp <- enricher(gene_1, TERM2GENE = wpid2gene, TERM2NAME = wpid2name)
head(ewp)
ewp2 <- GSEA(gene_1, TERM2GENE = wpid2gene, TERM2NAME = wpid2name, verbose=FALSE)
head(ewp2)
geneList <- sort(gene_1, decreasing = TRUE)
ewp2 <- GSEA(geneList, TERM2GENE = wpid2gene, TERM2NAME = wpid2name, verbose=FALSE)
head(ewp2)
y <- enricher(gene_1, TERM2GENE=cell_markers, minGSSize=1)
DT::datatable(as.data.frame(y))
edo <- enrichDGN(gene_1)
library(enrichplot)
barplot(edo, showCategory=20)
edo2 <- gseNCG(geneList, nPerm=10000)
p1 <- dotplot(edo, showCategory=30) + ggtitle("dotplot for ORA")
p2 <- dotplot(edo2, showCategory=30) + ggtitle("dotplot for GSEA")
plot_grid(p1, p2, ncol=2)
edox <- setReadable(edo, 'org.Hs.eg.db', 'ENTREZID')
p1 <- cnetplot(edox, foldChange=geneList)
## categorySize can be scaled by 'pvalue' or 'geneNum'
p2 <- cnetplot(edox, categorySize="pvalue", foldChange=geneList)
p3 <- cnetplot(edox, foldChange=geneList, circular = TRUE, colorEdge = TRUE)
cowplot::plot_grid(p1, p2, p3, ncol=3, labels=LETTERS[1:3], rel_widths=c(.8, .8, 1.2))
p1 <- cnetplot(edox, node_label="category")
p2 <- cnetplot(edox, node_label="gene")
p3 <- cnetplot(edox, node_label="all")
p4 <- cnetplot(edox, node_label="none")
cowplot::plot_grid(p1, p2, p3, p4, ncol=2, labels=LETTERS[1:4])
View(merged_3)
library(clusterProfiler)
data(gcSample)
xx <- compareCluster(gene_1, fun="enrichKEGG",
organism="hsa", pvalueCutoff=0.05)
p1 <- emapplot(xx)
p2 <- emapplot(xx,legend_n=2)
p3 <- emapplot(xx,pie="count")
p4 <- emapplot(xx,pie="count", pie_scale=1.5, layout="kk")
cowplot::plot_grid(p1, p2, p3, p4, ncol=2, labels=LETTERS[1:4])
edox <- setReadable(edo, 'org.Hs.eg.db', 'ENTREZID')
p1 <- cnetplot(edox, foldChange=geneList)
## categorySize can be scaled by 'pvalue' or 'geneNum'
p2 <- cnetplot(edox, categorySize="pvalue", foldChange=geneList)
p3 <- cnetplot(edox, foldChange=geneList, circular = TRUE, colorEdge = TRUE)
cowplot::plot_grid(p1, p2, p3, ncol=3, labels=LETTERS[1:3], rel_widths=c(.8, .8, 1.2))
cowplot::plot_grid(p1, p2, p3, ncol=3, labels=LETTERS[1:3], rel_widths=c(.8, .8, 1.2))
p3
gene_3=c("23504","1748","140825","1958","2354","8128","23500","50944","120114","170689","91752",
"91646","221687","80164","3048")
edo <- enrichDGN(gene_3)
p1 <- cnetplot(edox, node_label="category")
edox <- setReadable(edo, 'org.Hs.eg.db', 'ENTREZID')
p1 <- cnetplot(edox, node_label="category")
p2 <- cnetplot(edox, node_label="gene")
p3 <- cnetplot(edox, node_label="all")
p4 <- cnetplot(edox, node_label="none")
cowplot::plot_grid(p1, p2, p3, p4, ncol=2, labels=LETTERS[1:4])
barplot(edo, showCategory=20)
p1 <- cnetplot(edox, node_label="category")
p2 <- cnetplot(edox, node_label="gene")
p3 <- cnetplot(edox, node_label="all")
p4 <- cnetplot(edox, node_label="none")
cowplot::plot_grid(p1, p2, p3, p4, ncol=2, labels=LETTERS[1:4])
p1 <- heatplot(edox)
p2 <- heatplot(edox, foldChange=gene_3)
cowplot::plot_grid(p1, p2, ncol=1, labels=LETTERS[1:2])
p1 <- emapplot(edo)
p2 <- emapplot(edo, pie_scale=1.5)
p3 <- emapplot(edo,layout="kk")
p4 <- emapplot(edo, pie_scale=1.5,layout="kk")
cowplot::plot_grid(p1, p2, p3, p4, ncol=2, labels=LETTERS[1:4])
terms <- edo$Description[1:3]
p <- pmcplot(terms, 2010:2017)
p2 <- pmcplot(terms, 2010:2017, proportion=FALSE)
plot_grid(p, p2, ncol=2)
library("pathview")
hsa04110 <- pathview(gene.data  = gene_3,
pathway.id = "hsa04110",
species    = "hsa",
limit      = list(gene=max(abs(geneList)), cpd=1))
install.packages("pathview")
library("pathview")
hsa04110 <- pathview(gene.data  = gene_3,
pathway.id = "hsa04110",
species    = "hsa",
limit      = list(gene=max(abs(geneList)), cpd=1))
install.packages("pathview")
View(merged_4)
View(merged_3)
gene_4=merged_4$entrezid
gene_4
gene_3
gene_4=c("23504","1748","1958","140825","78995","2354","6633","3512","10964","8128","55502","23500","50944","120114","170689","3576","83985","91646","2731","221687","80164","3048")
edo <- enrichDGN(gene_4)
edox <- setReadable(edo, 'org.Hs.eg.db', 'ENTREZID')
p1 <- cnetplot(edox, node_label="category")
p2 <- cnetplot(edox, node_label="gene")
p3 <- cnetplot(edox, node_label="all")
p4 <- cnetplot(edox, node_label="none")
cowplot::plot_grid(p1, p2, p3, p4, ncol=2, labels=LETTERS[1:4])
p1 <- cnetplot(edox, node_label="category")
p2 <- cnetplot(edox, node_label="gene")
p3 <- cnetplot(edox, node_label="all")
p4 <- cnetplot(edox, node_label="none")
cowplot::plot_grid(p1, p2, p3, p4, ncol=2, labels=LETTERS[1:4])
BiocManager::install("netbiov")
library(netbiov)
browseVignettes("netbiov")
BiocManager::install("KEGGprofile")
library(KEGGProfile)
library(KEGGprofile)
#CCP_Acet vs CCP
library(pheatmap)
#ex=merged_1[,c(9:176)]
ex=merged_1[,c(4,9:176)]
row.names(ex)=ex$symbol
ex=ex[,c(2:169)]
pheatmap(ex)
cal_z_score <- function(x){(x - mean(x)) / sd(x)}
data_subset_norm <- t(apply(ex, 1, cal_z_score))
pheatmap(data_subset_norm)
data_subset_norm=as.data.frame(data_subset_norm)
data_subset_norm1=data_subset_norm[,c(39:58,1:20)]
my_sample_col <- data.frame(sample = rep(c("CCP_Acet", "CCP"), c(20,20)))
row.names(my_sample_col) <- colnames(data_subset_norm1)
library(RColorBrewer)
heat_colors <- brewer.pal(6, "YlOrRd")
pheatmap(data_subset_norm1, annotation_col = my_sample_col,color = heat_colors)
#Triple vs CCP
library(pheatmap)
ex=merged_3[,c(4,9:176)]
row.names(ex)=ex$symbol
ex=ex[,c(2:169)]
pheatmap(ex)
cal_z_score <- function(x){(x - mean(x)) / sd(x)}
data_subset_norm <- t(apply(ex, 1, cal_z_score))
pheatmap(data_subset_norm)
data_subset_norm=as.data.frame(data_subset_norm)
data_subset_norm1=data_subset_norm[,c(118:137,1:20)]
my_sample_col <- data.frame(sample = rep(c("Triple", "CCP"), c(20,20)))
row.names(my_sample_col) <- colnames(data_subset_norm1)
library(RColorBrewer)
heat_colors <- brewer.pal(6, "YlOrRd")
pheatmap(data_subset_norm1, annotation_col = my_sample_col,color = heat_colors)
#negative vs CCP
library(pheatmap)
ex=merged_4[,c(4,9:176)]
row.names(ex)=ex$symbol
ex=ex[,c(2:169)]
pheatmap(ex)
cal_z_score <- function(x){(x - mean(x)) / sd(x)}
data_subset_norm <- t(apply(ex, 1, cal_z_score))
pheatmap(data_subset_norm)
data_subset_norm=as.data.frame(data_subset_norm)
data_subset_norm1=data_subset_norm[,c(139:168,1:38)]
my_sample_col <- data.frame(sample = rep(c("Negative", "CCP"), c(38,30)))
row.names(my_sample_col) <- colnames(data_subset_norm1)
library(RColorBrewer)
heat_colors <- brewer.pal(6, "YlOrRd")
pheatmap(data_subset_norm1, annotation_col = my_sample_col,color = heat_colors)
setwd("~/Desktop/RA")
dat <- read.csv(file="Erosion_dat.csv", row.names=1)
#filtering and naming genes
library(biomaRt)
ensembl = useMart("ensembl",dataset="hsapiens_gene_ensembl")
nonprotein=biomaRt::getBM(attributes = c("ensembl_transcript_id", "transcript_version", "ensembl_gene_id", "external_gene_name", "entrezgene_id", "description", "gene_biotype"), filters='biotype', values=c("rRNA"), mart = ensembl)
#All protein coding genes
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "transcript_version", "ensembl_gene_id", "external_gene_name", "entrezgene_id", "description", "gene_biotype"), filters='biotype', values="protein_coding", mart = ensembl)
#Ribosomal proteins
ribo.proteins <- unique(t2g$ensembl_gene_id[grep("ribosomal protein", t2g$description)])
rRNA.proteins <- unique(nonprotein$ensembl_gene_id[grep("rRNA", nonprotein$biotype)])
#remove version from identifier
rownames(dat) <- sub("\\.\\d+", "", rownames(dat))
#remove any ribosomal proteins from the RNA-Seq from the counts
dat <- dat[!rownames(dat) %in% ribo.proteins,]
dat <- dat[!rownames(dat) %in% rRNA.proteins,]
#design-exp table
colTable <- read.csv("Erosion_exp_info.csv",row.names=1)
#Deseq analysis
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData=dat,colData=colTable,design= ~ group)
keep <- rowSums(counts(dds) >=10) >= 10
dds <- dds[keep,]
setwd("~/Desktop/RA/Erosion_vs_No_erosion")
dat <- read.csv(file="Erosion_dat.csv", row.names=1)
#filtering and naming genes
library(biomaRt)
ensembl = useMart("ensembl",dataset="hsapiens_gene_ensembl")
nonprotein=biomaRt::getBM(attributes = c("ensembl_transcript_id", "transcript_version", "ensembl_gene_id", "external_gene_name", "entrezgene_id", "description", "gene_biotype"), filters='biotype', values=c("rRNA"), mart = ensembl)
#All protein coding genes
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "transcript_version", "ensembl_gene_id", "external_gene_name", "entrezgene_id", "description", "gene_biotype"), filters='biotype', values="protein_coding", mart = ensembl)
#Ribosomal proteins
ribo.proteins <- unique(t2g$ensembl_gene_id[grep("ribosomal protein", t2g$description)])
rRNA.proteins <- unique(nonprotein$ensembl_gene_id[grep("rRNA", nonprotein$biotype)])
#remove version from identifier
rownames(dat) <- sub("\\.\\d+", "", rownames(dat))
#remove any ribosomal proteins from the RNA-Seq from the counts
dat <- dat[!rownames(dat) %in% ribo.proteins,]
dat <- dat[!rownames(dat) %in% rRNA.proteins,]
#design-exp table
colTable <- read.csv("Erosion_exp_info.csv",row.names=1)
#Deseq analysis
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData=dat,colData=colTable,design= ~ group)
keep <- rowSums(counts(dds) >=10) >= 10
dds <- dds[keep,]
setwd("~/Desktop/RA/No_erosion_vs_Erosion")
dat <- read.csv(file="Erosion_dat.csv", row.names=1)
#filtering and naming genes
library(biomaRt)
ensembl = useMart("ensembl",dataset="hsapiens_gene_ensembl")
nonprotein=biomaRt::getBM(attributes = c("ensembl_transcript_id", "transcript_version", "ensembl_gene_id", "external_gene_name", "entrezgene_id", "description", "gene_biotype"), filters='biotype', values=c("rRNA"), mart = ensembl)
#All protein coding genes
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "transcript_version", "ensembl_gene_id", "external_gene_name", "entrezgene_id", "description", "gene_biotype"), filters='biotype', values="protein_coding", mart = ensembl)
#Ribosomal proteins
ribo.proteins <- unique(t2g$ensembl_gene_id[grep("ribosomal protein", t2g$description)])
rRNA.proteins <- unique(nonprotein$ensembl_gene_id[grep("rRNA", nonprotein$biotype)])
#remove version from identifier
rownames(dat) <- sub("\\.\\d+", "", rownames(dat))
#remove any ribosomal proteins from the RNA-Seq from the counts
dat <- dat[!rownames(dat) %in% ribo.proteins,]
dat <- dat[!rownames(dat) %in% rRNA.proteins,]
#design-exp table
colTable <- read.csv("Erosion_exp_info.csv",row.names=1)
#Deseq analysis
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData=dat,colData=colTable,design= ~ group)
keep <- rowSums(counts(dds) >=10) >= 10
dds <- dds[keep,]
dds <- DESeq(dds, test="LRT",reduced = ~1)
resultsNames(dds)
#results
res_Erosion<- results(dds,contrast=c("group","No_Erosion","Erosion"))
res_Erosion_sort=res_Erosion[order(res_Erosion$padj),]
res_Erosion_sig<- subset(res_Erosion_sort,padj<0.05)
res_Erosion_sig$symbol <- t2g$external_gene_name[match(rownames(res_Erosion_sig), t2g$ensembl_gene_id)]
res_Erosion_sig$entrezid <- t2g$entrezgene[match(rownames(res_Erosion_sig), t2g$ensembl_gene_id)]
res_Erosion_sig=na.omit(res_Erosion_sig)
View(res_Erosion_sig)
write.csv(res_Erosion_sig, "sig_No_Erosion_vs_Erosion.csv", row.names=TRUE)
#normalised count
normalized_counts <- counts(dds, normalized=TRUE)
write.csv(normalized_counts, file="normalized_counts_Erosion.csv", quote=F, col.names=NA)
setwd("~/Desktop/RA/No_Joint_Narrowing_vs_Joint_Narrowing")
dat <- read.csv(file="Joint_Narrow_dat.csv", row.names=1)
#filtering and naming genes
library(biomaRt)
ensembl = useMart("ensembl",dataset="hsapiens_gene_ensembl")
nonprotein=biomaRt::getBM(attributes = c("ensembl_transcript_id", "transcript_version", "ensembl_gene_id", "external_gene_name", "entrezgene_id", "description", "gene_biotype"), filters='biotype', values=c("rRNA"), mart = ensembl)
#All protein coding genes
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "transcript_version", "ensembl_gene_id", "external_gene_name", "entrezgene_id", "description", "gene_biotype"), filters='biotype', values="protein_coding", mart = ensembl)
#Ribosomal proteins
ribo.proteins <- unique(t2g$ensembl_gene_id[grep("ribosomal protein", t2g$description)])
rRNA.proteins <- unique(nonprotein$ensembl_gene_id[grep("rRNA", nonprotein$biotype)])
#remove version from identifier
rownames(dat) <- sub("\\.\\d+", "", rownames(dat))
#remove any ribosomal proteins from the RNA-Seq from the counts
dat <- dat[!rownames(dat) %in% ribo.proteins,]
dat <- dat[!rownames(dat) %in% rRNA.proteins,]
#design exp table
colTable <- read.csv("Joint_Narrowing_exp_info.csv",row.names=1)
#Deseq analysis
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData=dat,colData=colTable,design= ~ group)
keep <- rowSums(counts(dds) >=10) >= 10
dds <- dds[keep,]
dds <- DESeq(dds,test="LRT",reduced = ~1)
resultsNames(dds)
#results
res_Joint_Narrowing<- results(dds,contrast=c("group","No_Joint_Narrowing","Joint_Narrowing"))
res_Joint_Narrowing_sort=res_Joint_Narrowing[order(res_Joint_Narrowing$padj),]
res_Joint_Narrowing_sig<- subset(res_Joint_Narrowing_sort,padj<0.05)
res_Joint_Narrowing_sig$symbol <- t2g$external_gene_name[match(rownames(res_Joint_Narrowing_sig), t2g$ensembl_gene_id)]
res_Joint_Narrowing_sig$entrezid <- t2g$entrezgene[match(rownames(res_Joint_Narrowing_sig), t2g$ensembl_gene_id)]
res_Joint_Narrowing_sig=na.omit(res_Joint_Narrowing_sig)
write.csv(res_Joint_Narrowing_sig, "sig_No_Joint_Narrowing_vs_Joint_Narrowing.csv", row.names=TRUE)
#normalised count
normalized_counts <- counts(dds, normalized=TRUE)
write.csv(normalized_counts, file="normalized_counts_Joint_Narrowing.csv", quote=F, col.names=NA)
#plot count of HLA-DQB1 gene
plotCounts(dds, gene="ENSG00000179344", intgroup="group")
plotCounts(dds, gene="ENSG00000179344", intgroup="group", transform=FALSE)
setwd("~/Desktop/RA/Progression_vs_No_Progression")
dat <- read.csv(file="Progression_data.csv", row.names=1)
#filtering and naming genes
library(biomaRt)
ensembl = useMart("ensembl",dataset="hsapiens_gene_ensembl")
nonprotein=biomaRt::getBM(attributes = c("ensembl_transcript_id", "transcript_version", "ensembl_gene_id", "external_gene_name", "entrezgene_id", "description", "gene_biotype"), filters='biotype', values=c("rRNA"), mart = ensembl)
#All protein coding genes
t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "transcript_version", "ensembl_gene_id", "external_gene_name", "entrezgene_id", "description", "gene_biotype"), filters='biotype', values="protein_coding", mart = ensembl)
#Ribosomal proteins
ribo.proteins <- unique(t2g$ensembl_gene_id[grep("ribosomal protein", t2g$description)])
rRNA.proteins <- unique(nonprotein$ensembl_gene_id[grep("rRNA", nonprotein$biotype)])
#remove version from identifier
rownames(dat) <- sub("\\.\\d+", "", rownames(dat))
#remove any ribosomal proteins from the RNA-Seq from the counts
dat <- dat[!rownames(dat) %in% ribo.proteins,]
dat <- dat[!rownames(dat) %in% rRNA.proteins,]
#design exp table without acetylated
colTable <- read.csv("Progression_exp_info.csv",row.names=1)
#Deseq analysis
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData=dat,colData=colTable,design= ~ group)
keep <- rowSums(counts(dds) >=10) >= 10
dds <- dds[keep,]
dds <- DESeq(dds,test="LRT",reduced = ~1)
resultsNames(dds)
#results
res_Progression<- results(dds,contrast=c("group","Progession","No_Progession"))
res_Progression_sort=res_Progression[order(res_Progression$padj),]
res_Progression_sig<- subset(res_Progression_sort,padj<0.05)
res_Progression_sig$symbol <- t2g$external_gene_name[match(rownames(res_Progression_sig), t2g$ensembl_gene_id)]
res_Progression_sig$entrezid <- t2g$entrezgene[match(rownames(res_Progression_sig), t2g$ensembl_gene_id)]
res_Progression_sig=na.omit(res_Progression_sig)
write.csv(res_Progression_sig, "sig_Progression_vs_No_Progression.csv", row.names=TRUE)
#normalised count
normalized_counts <- counts(dds, normalized=TRUE)
write.csv(normalized_counts, file="normalized_counts_Progression.csv", quote=F, col.names=NA)
View(merged_1)
View(significant_genes_CCP_Acet_vs_CCP)
View(significant_genes_CCP_Carb_Acet_vs_CCP)
View(significant_genes_Negative_vs_CCP)
BiocManager::install("ReactomeGSA")
browseVignettes("ReactomeGSA")
merged_4$entrezid
View(merged_4)
merged_3$entrezid
merged_1$entrezid
View(merged_3)
View(merged_1)
View(merged_2)
